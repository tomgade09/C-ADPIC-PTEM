	///Code to run electron/ion equation of motion in a serialized way (no CUDA)
	//serial (CPU) loop
	/*double args[6];

	serialBegin = std::chrono::steady_clock::now();
	while (loopIdx < NUMITERATIONS)
	{
		for (int iii = 0; iii < NUMPARTICLES; iii++) //run every iteration
		{
			e_in_sim[iii] = ((electrons[2][iii] < MAGSPH_MAX_Z) || (electrons[2][iii] > IONSPH_MIN_Z)); //Makes sure particles are within bounds
			i_in_sim[iii] = ((ions[2][iii] < MAGSPH_MAX_Z) || (ions[2][iii] > IONSPH_MIN_Z));
		}

		for (int iii = 0; iii < NUMPARTICLES; iii++) //updates position of every particle
		{//args array: [dt, vz, mu, q, m, pz_0]
			//electrons
			if (e_in_sim[iii] == true)
			{//if electrons leave the simulation, stop doing calculations on them
				args[0] = 0.0;
				args[1] = electrons[0][iii];
				args[2] = electrons[1][iii];
				args[3] = CHARGE_ELEM * -1;
				args[4] = MASS_ELECTRON;
				args[5] = electrons[2][iii];
				electrons[0][iii] += fourthOrderRungeKutta1D(accel1DCB, args, 6, DT);
				electrons[2][iii] += electrons[0][iii] * DT;
			}

			//ions
			if (i_in_sim[iii] == true)
			{
				args[1] = ions[0][iii];
				args[2] = ions[1][iii];
				args[3] = CHARGE_ELEM;
				args[4] = MASS_PROTON;
				args[5] = ions[2][iii];
				ions[0][iii] += fourthOrderRungeKutta1D(accel1DCB, args, 6, DT);
				ions[2][iii] += ions[0][iii] * DT;
			}
		}
		
		loopIdx++;
		if (loopIdx % 100 == 0)
			std::cout << loopIdx << " / " << NUMITERATIONS << "\n";
	}
	serialEnd = std::chrono::steady_clock::now();*/

	///Code to duplicate arrays for running and comparing serial with CUDA
	/*double* v_e = new double[NUMPARTICLES];
	double* mu_e = new double[NUMPARTICLES];
	double* z_e = new double[NUMPARTICLES];
	double* v_i = new double[NUMPARTICLES];
	double* mu_i = new double[NUMPARTICLES];
	double* z_i = new double[NUMPARTICLES];
	bool* e_in_cuda = new bool[NUMPARTICLES];
	bool* i_in_cuda = new bool[NUMPARTICLES];
	
	for (int iii = 0; iii < NUMPARTICLES; iii++)
	{
		v_e[iii] = electrons[0][iii];
		mu_e[iii] = electrons[1][iii];
		z_e[iii] = electrons[2][iii];
		v_i[iii] = ions[0][iii];
		mu_i[iii] = ions[1][iii];
		z_i[iii] = ions[2][iii];
		e_in_cuda[iii] = e_in_sim[iii];
		i_in_cuda[iii] = i_in_sim[iii];
	}
	
	double** elecCUDA = new double*[3];
	double** ionsCUDA = new double*[3];
	elecCUDA[0] = v_e;
	elecCUDA[1] = mu_e;
	elecCUDA[2] = z_e;
	ionsCUDA[0] = v_i;
	ionsCUDA[1] = mu_i;
	ionsCUDA[2] = z_i;*/

	///compare serialized (CPU) calculations with CUDA parallelized
	/*int ionCount{ 0 };
	int electronCount{ 0 };

	for (int iii = 0; iii < NUMPARTICLES; iii++)
	{
		if ((electrons[0][iii] != elecCUDA[0][iii]) || (electrons[1][iii] != elecCUDA[1][iii]) || (electrons[2][iii] != elecCUDA[2][iii]))
		{
			electronCount++;
			if (electronCount < 10)
			{
				std::cout << "Electron Mismatch: \n" << electrons[0][iii] << ", " << electrons[1][iii] << ", " << electrons[2][iii] << "\n";
				std::cout << elecCUDA[0][iii] << ", " << elecCUDA[1][iii] << ", " << elecCUDA[2][iii] << "\n";
				std::cout << electrons[0][iii] / elecCUDA[0][iii] << ", " << electrons[1][iii] / elecCUDA[1][iii] << ", ";
				std::cout << electrons[2][iii] / elecCUDA[2][iii] << "\n\n";
			}
		}
		if ((ions[0][iii] != ionsCUDA[0][iii]) || (ions[1][iii] != ionsCUDA[1][iii]) || (ions[2][iii] != ionsCUDA[2][iii]))
		{
			ionCount++;
			if (ionCount < 10)
			{
				std::cout << "Ion Mismatch: \n" << ions[0][iii] << ", " << ions[1][iii] << ", " << ions[2][iii] << "\n";
				std::cout << ionsCUDA[0][iii] << ", " << ionsCUDA[1][iii] << ", " << ionsCUDA[2][iii] << "\n";
				std::cout << ions[0][iii] / ionsCUDA[0][iii] << ", " << ions[1][iii] / ionsCUDA[1][iii] << ", ";
				std::cout << ions[2][iii] / ionsCUDA[2][iii] << "\n\n";
			}
		}
	}

	std::cout << "electrons not matching: " << electronCount << "  ions not matching: " << ionCount << "\n";*/

	///Prints if electrons/ions are outside of range
			/*if (e_in_sim[iii] == false)
				std::cout << "Electron outside of range: " << iii << "  " << electrons[2][iii] << " outside of " << IONSPH_MIN_Z << " - " << MAGSPH_MAX_Z << "\n";
			if (i_in_sim[iii] == false)
				std::cout << "Ion outside of range: " << iii << "  " << ions[2][iii] << " outside of " << IONSPH_MIN_Z << " - " << MAGSPH_MAX_Z << "\n";*/

	///Print particle characteristics
	/*for (int jjj = 0; jjj < NUMPARTICLES; jjj++)
	{
		std::cout << "vpara, vperp, z, InPlay? : " << electrons[0][jjj] << ", " << electrons[1][jjj] << ", ";
		std::cout << electrons[2][jjj] << ", " << electrons[3][jjj] << " \n";
	}

	for (int jjj = 0; jjj < NUMPARTICLES; jjj++)
	{
		std::cout << "vpara, vperp, z, InPlay? : " << ions[0][jjj] << ", " << ions[1][jjj] << ", ";
		std::cout << ions[2][jjj] << ", " << ions[3][jjj] << " \n";
	}*/

	///Check how many particles are left in sim
	/*for (int iii = 0; iii < NUMPARTICLES; iii++)
	{
		if (e_in_sim[iii] == true)
			electronCount++;
		if (i_in_sim[iii] == true)
			ionCount++;
	}

	std::cout << "electrons left: " << electronCount << "  ions left: " << ionCount << "\n";*/

	///FOR CODE THAT REPLACES BOOL WITH DOUBLE AND APPENDS TO THE END OF H_ELEC/H_IONS - FROM MAIN
	//double* e_in_sim = new double[NUMPARTICLES]; //positive - particle is in sim, negative - it isn't
	//double* i_in_sim = new double[NUMPARTICLES]; //making this double instead of bool will allow me to "bundle" everything together without complicated structs, etc
	//electrons[3] = e_in_sim;
	//ions[3] = i_in_sim;

	/*for (int iii = 0; iii < NUMPARTICLES; iii++) //May want to do this differently later
	{
		if ((electrons[2][iii] > MAGSPH_MAX_Z) || (electrons[2][iii] < IONSPH_MIN_Z))
		{
			e_in_sim[iii] = -10.0;
			std::cout << "Electrons outside of range: " << iii << "  " << electrons[2][iii] << " outside of " << IONSPH_MIN_Z << " - " << MAGSPH_MAX_Z << "\n";
		}
		else
			e_in_sim[iii] = 10.0;
	}

	for (int iii = 0; iii < NUMPARTICLES; iii++) //May want to do this differently later
	{
		if ((ions[2][iii] > MAGSPH_MAX_Z) || (ions[2][iii] < IONSPH_MIN_Z))
		{
			i_in_sim[iii] = -10.0;
			std::cout << "Ions outside of range: " << iii << "  " << ions[2][iii] << " outside of " << IONSPH_MIN_Z << " - " << MAGSPH_MAX_Z << "\n";
		}
		else
			i_in_sim[iii] = 10.0;
	}*/

	/*for (int jjj = 0; jjj < NUMPARTICLES; jjj++)
	{
		std::cout << "vpara, vperp, z, InPlay? : " << electrons[0][jjj] << ", " << electrons[1][jjj] << ", ";
		std::cout << electrons[2][jjj] << ", " << electrons[3][jjj] << " \n";
	}

	for (int jjj = 0; jjj < NUMPARTICLES; jjj++)
	{
		std::cout << "vpara, vperp, z, InPlay? : " << ions[0][jjj] << ", " << ions[1][jjj] << ", ";
		std::cout << ions[2][jjj] << ", " << ions[3][jjj] << " \n";
	}*/