TO-DO
DONE - Top at 4 Re
DONE, NEEDS BETTER PHYSICS - Particles out top are lost completely (done), out bottom - scattering probability, distribution
DONE, BUT FACTOR IN DENSITY? - Make distribution maxwellian
DONE, CONSIDER OTHER INJECTION SCHEMES - More particles, e, p injected over simulation (bump up to a million?, 10000 particles injected every iteration/so many hundredths of second?)
DONE - Stop generating a distribution on CPU at beginning - take out a whole bunch of copy code, maybe even normal distribution code, still 0 the arrays
DONE - Fix satellite code
DONE - Log file with success messages
DONE - Spit run times to Log File, maybe print some on screen
DONE - Either verify normalization or just normalize all the values at the end - Fix botched up normalization system
MAYBE NOT, ALLOWS TIME BASED CAPTURE, COULD ALSO CAPTURE SIM TIME - Consolidate satellite data into one array, then pass to python
DONE - Satellite fix - remove zero values
DONE, NEEDS A GOOD TEST - Fix LUT code to be one function - make LUT 2D on proc - like 1D with pointers to start of next dimension
DONE - Replace double* arrays with std::vectors, pass with std::vectors::data (I think)
DONE - Restructure - Combine most of two simulation classes - make the two particle, two source, 1D code the generic one
RIGHT NOW THROUGH CSV, WRITE BINS - Write Satellite values to disk along with times
SOMEWHAT, RESULTS ARE REASONABLE - Validation with known values (possibly magnetic bottle) - Calculations checked against excel and are good
WORKS IN C++ - Fix sideways CSV Writing (python)
- Separate Particle functions into their own class, create one for each particle type
- Enable qsps, alfven via switch
ALMOST DONE - Enable load particle distribution via switch
- Remove frivolous messages
- Maybe, change the convertMuToVperp and vice versa to pass in array pointers and execute on whatever is passed in
- Split mag and ionosphere sources better - down the middle instead of interleaved
- Enforce calling certain functions after other required (saving csv/xlsx after the data is copied and formed)
- Make python script to load everything and set up within the interactive interpreter
- Document things better

- XLSX writing with xlnt library?
- Some sort of error handling system instead of cout messages
      - Class of some sort, some common error codes (indexing errors, values out of range, etc)
      - Encapsulate everything in try, except blocks?
- Change over current error messages to log file
- Possibly more common code compiled to DLLs to make recompiling less complex - call already made DLLs from sims (ex: FileIO, Simulation)
- Pass in variables instead of having to recompile every time (CSV or possibly XML if you want to be fancy)
- Photoelectrons