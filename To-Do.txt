TO-DO:
IN PROGRESS - Python simulation variables file
MOSTLY DONE - Change over current error messages to log file
MOSTLY DONE - Remove frivolous messages
- Python check returned data, fix print functions
- RNG generates total energy and pitch angle
- Dipole coordinate system
- Bin particles, output to file format
- Photoelectrons
- Weighted particles by maxwellian distribution
- Alfven E generator (Dr. Lysak's code)
- Restructure Physics (E (Alfven LUT, Alfven Calc, QSPS), B (dipole, IGRF) Classes with common function names, class to handle EOM, backscatter class, photoelectrons, maybe dist function stuff)
- Put GPU particle array functions in Particle class
- CDF file output
- Python, maybe set num particles based on bin size
- Maybe a common simulation run in C++
- Maybe a LUT Grad B w/ linear interpolation

- Better name
- Document things better
- Ionosphere scattering
- CMakeLists if possible with CUDA (including compile options - 5.0, cuda pic)
- Some sort of error handling system instead of cout messages
      - Class of some sort, some common error codes (indexing errors, values out of range, etc)
      - Encapsulate everything in try, except blocks?
	  DONE - Or flag set that ends simulation on certain errors
- Cross platform compiling
IN PROGRESS - XLSX writing with xlnt library?
IN PROGRESS - Testing user error cases, removing error messages by functions not touched by users, intentionally try to break


STUFF THAT IS DONE:
DONE - Top at 4 Re
DONE - Stop generating a distribution on CPU at beginning - take out a whole bunch of copy code, maybe even normal distribution code, still 0 the arrays
DONE - Fix satellite code
DONE - Log file with success messages
DONE - Spit run times to Log File, maybe print some on screen
DONE - Either verify normalization or just normalize all the values at the end - Fix botched up normalization system
DONE - Satellite fix - remove zero values
DONE - Replace double* arrays with std::vectors, pass with std::vectors::data (I think)
DONE - Restructure - Combine most of two simulation classes - make the two particle, two source, 1D code the generic one
DONE - Separate Particle functions into their own class, create one for each particle type
DONE - Fix LUT code to be one function - make LUT 2D on proc - like 1D with pointers to start of next dimension
DONE - Maybe, change the convertMuToVperp and vice versa to pass in array pointers and execute on whatever is passed in
DONE - Split mag and ionosphere sources better - down the middle instead of interleaved
DONE, JUST LOAD SIMULATION.PY - Make python script to load everything and set up within the interactive interpreter
DONE, THROUGH PARTICLE CLASS - Enable load particle distribution via switch
DONE - Pass in variables instead of having to recompile every time (CSV or possibly XML if you want to be fancy)
DONE - Consolidate satellite data into one array, then pass to python
DONE - Enable qsps, alfven via switch
DONE - Write Satellite values to disk along with times
DONE - Quick folder restructure, also tools
DONE - Loading files - check bin size, compare with input number read

STUFF THAT IS DONE WITH CAVEATS:
DONE, NEEDS BETTER PHYSICS - Particles out top are lost completely (done), out bottom - scattering probability, distribution
DONE, BUT FACTOR IN DENSITY? - Make distribution maxwellian
DONE, CONSIDER OTHER INJECTION SCHEMES - More particles, e, p injected over simulation (bump up to a million?, 10000 particles injected every iteration/so many hundredths of second?)
SOMEWHAT, RESULTS ARE REASONABLE - Validation with known values (possibly magnetic bottle) - Calculations checked against excel and are good
WORKS IN C++ - Fix sideways CSV Writing (python)
DONE, ADD STRUCTURE WHERE NECESSARY IN THE FUTURE - Enforce calling certain functions after other required (saving csv/xlsx after the data is copied and formed)