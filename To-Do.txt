TO-DO:
ONGOING - Testing user error cases, removing error messages by functions not touched by users, intentionally try to break
IN PROGRESS - Document things better
MAYBE - Hijack clog and write to log file (easy, quick)
- Alfven E generator (Dr. Lysak's code)
- Custom logfile and particle exception catchers (instead of copy pasta from FileIO)
- Write tests that can be executed cross-platform
	- Sample distributions (maybe 100 particles or something) under different BField / EField models
	- DipoleLUT vs Dipole
	- Save simulation to disk, load, compare


LOWER PRIORITY:
DONE, NEEDS GOOD TEST - Move random particle generator to Particle class
- RNG generates total energy and pitch angle
- Fix log file time width oddity
- Better name
MAYBE - CPU Processing vs GPU, ability to compile on machines without CUDA libraries (through preprocessor defines and such)
	       - Modularize CUDA code - only put explicitly cuda things in .cu files, separate rest to .cpp

STUFF THAT IS DONE:
DONE - Top at 4 Re
DONE - Stop generating a distribution on CPU at beginning - take out a whole bunch of copy code, maybe even normal distribution code, still 0 the arrays
DONE - Fix satellite code
DONE - Log file with success messages
DONE - Spit run times to Log File, maybe print some on screen
DONE - Either verify normalization or just normalize all the values at the end - Fix botched up normalization system
DONE - Satellite fix - remove zero values
DONE - Replace double* arrays with std::vectors, pass with std::vectors::data (I think)
DONE - Restructure - Combine most of two simulation classes - make the two particle, two source, 1D code the generic one
DONE - Separate Particle functions into their own class, create one for each particle type
DONE - Fix LUT code to be one function - make LUT 2D on proc - like 1D with pointers to start of next dimension
DONE - Maybe, change the convertMuToVperp and vice versa to pass in array pointers and execute on whatever is passed in
DONE - Split mag and ionosphere sources better - down the middle instead of interleaved
DONE, JUST LOAD SIMULATION.PY - Make python script to load everything and set up within the interactive interpreter
DONE, THROUGH PARTICLE CLASS - Enable load particle distribution via switch
DONE - Pass in variables instead of having to recompile every time (CSV or possibly XML if you want to be fancy)
DONE - Consolidate satellite data into one array, then pass to python
DONE - Enable qsps, alfven via switch
DONE - Write Satellite values to disk along with times
DONE - Quick folder restructure, also tools
DONE - Loading files - check bin size, compare with input number read
DONE - Python simulation variables file
DONE - Add way to either shutoff log or to add additional log file
DONE - Put GPU particle array functions in Particle class
DONE - Maybe a common simulation run in C++
DONE - Dipole coordinate system
DONE - Remove frivolous messages
DONE - API Wrap with try/catch
DONE - Change over current error messages to log file
DONE - Some sort of error handling system instead of cout messages
      DONE - Class of some sort, some common error codes (indexing errors, values out of range, etc)
      DONE - Encapsulate everything in try, catch blocks?
	  DONE - Or flag set that ends simulation on certain errors
	  DONE - Exit on certain criteria (CUDA errors)
	  DONE, RATHER FATAL ERROR - Cuda error class
	  DONE, NEEDS TEST - Redirect std::cerr, maybe std::clog
	  DONE, ADD LATER WHERE NECESSARY - Where appropriate throw exceptions, remove error boolean
DONE - Make python class easier to read by moving ctypes defs
DONE - Handle satellite copying data to host from within satellite host
DONE - Restructure Physics (E (Alfven LUT, Alfven Calc, QSPS), B (dipole, IGRF) Classes with common function names)
DONE - CDF file output
DONE - Bin particles
DONE - Weighted particles by maxwellian distribution
DONE - Add post processing classes (backscatter class, photoelectrons, ionospheric scattering, maybe dist function stuff, class to handle EOM)
DONE - Finish class for loading previous sim data
DONE - Python interface for loading previous sim data
DONE - LUT Grad B w/ linear interpolation
DONE - Python interfaces for E Field and B Field models
DONE - Remove unnecessary includes/maybe all/most includes in headers
DONE - Fix expansion code for satellite (endless loop if data is not sparse)
DONE - Cross platform compiling
DONE - Particles out top are lost completely (done), out bottom - scattering probability, distribution
DONE - Make distribution maxwellian